   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB6:
  15               		.file 1 "main.c"
   1:main.c        **** #include<avr/io.h>
   2:main.c        **** #include<util/delay.h>
   3:main.c        **** 
   4:main.c        **** int main(void){
  16               		.loc 1 4 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
   5:main.c        **** 	DDRC = 0xff;
  22               		.loc 1 5 0
  23 0000 8FEF      		ldi r24,lo8(-1)
  24 0002 84BB      		out 0x14,r24
   6:main.c        **** 	while(1){
   7:main.c        **** 		PORTC = 0b00000001;
  25               		.loc 1 7 0
  26 0004 81E0      		ldi r24,lo8(1)
   8:main.c        **** 		_delay_ms(500);
   9:main.c        **** 		PORTC = 0b00000010;
  27               		.loc 1 9 0
  28 0006 92E0      		ldi r25,lo8(2)
  10:main.c        **** 		_delay_ms(500);
  11:main.c        **** 		PORTC = 0b00000100;
  29               		.loc 1 11 0
  30 0008 24E0      		ldi r18,lo8(4)
  12:main.c        **** 		_delay_ms(500);
  13:main.c        **** 		PORTC = 0b00001000;
  31               		.loc 1 13 0
  32 000a 38E0      		ldi r19,lo8(8)
  14:main.c        **** 		_delay_ms(500);
  15:main.c        **** 		PORTC = 0b00010000;
  33               		.loc 1 15 0
  34 000c 40E1      		ldi r20,lo8(16)
  16:main.c        **** 		_delay_ms(500);
  17:main.c        **** 		PORTC = 0b00100000;
  35               		.loc 1 17 0
  36 000e 50E2      		ldi r21,lo8(32)
  18:main.c        **** 		_delay_ms(500);
  19:main.c        **** 		PORTC = 0b01000000;
  37               		.loc 1 19 0
  38 0010 60E4      		ldi r22,lo8(64)
  20:main.c        **** 		_delay_ms(500);
  21:main.c        **** 		PORTC = 0b10000000;
  39               		.loc 1 21 0
  40 0012 70E8      		ldi r23,lo8(-128)
  41               	.L2:
   7:main.c        **** 		_delay_ms(500);
  42               		.loc 1 7 0 discriminator 1
  43 0014 85BB      		out 0x15,r24
  44               	.LVL0:
  45               	.LBB34:
  46               	.LBB35:
  47               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  48               		.loc 2 187 0 discriminator 1
  49 0016 AFE9      		ldi r26,lo8(99999)
  50 0018 E6E8      		ldi r30,hi8(99999)
  51 001a F1E0      		ldi r31,hlo8(99999)
  52 001c A150      	1:	subi r26,1
  53 001e E040      		sbci r30,0
  54 0020 F040      		sbci r31,0
  55 0022 01F4      		brne 1b
  56 0024 00C0      		rjmp .
  57 0026 0000      		nop
  58               	.LVL1:
  59               	.LBE35:
  60               	.LBE34:
   9:main.c        **** 		_delay_ms(500);
  61               		.loc 1 9 0 discriminator 1
  62 0028 95BB      		out 0x15,r25
  63               	.LVL2:
  64               	.LBB36:
  65               	.LBB37:
  66               		.loc 2 187 0 discriminator 1
  67 002a AFE9      		ldi r26,lo8(99999)
  68 002c E6E8      		ldi r30,hi8(99999)
  69 002e F1E0      		ldi r31,hlo8(99999)
  70 0030 A150      	1:	subi r26,1
  71 0032 E040      		sbci r30,0
  72 0034 F040      		sbci r31,0
  73 0036 01F4      		brne 1b
  74 0038 00C0      		rjmp .
  75 003a 0000      		nop
  76               	.LVL3:
  77               	.LBE37:
  78               	.LBE36:
  11:main.c        **** 		_delay_ms(500);
  79               		.loc 1 11 0 discriminator 1
  80 003c 25BB      		out 0x15,r18
  81               	.LVL4:
  82               	.LBB38:
  83               	.LBB39:
  84               		.loc 2 187 0 discriminator 1
  85 003e AFE9      		ldi r26,lo8(99999)
  86 0040 E6E8      		ldi r30,hi8(99999)
  87 0042 F1E0      		ldi r31,hlo8(99999)
  88 0044 A150      	1:	subi r26,1
  89 0046 E040      		sbci r30,0
  90 0048 F040      		sbci r31,0
  91 004a 01F4      		brne 1b
  92 004c 00C0      		rjmp .
  93 004e 0000      		nop
  94               	.LVL5:
  95               	.LBE39:
  96               	.LBE38:
  13:main.c        **** 		_delay_ms(500);
  97               		.loc 1 13 0 discriminator 1
  98 0050 35BB      		out 0x15,r19
  99               	.LVL6:
 100               	.LBB40:
 101               	.LBB41:
 102               		.loc 2 187 0 discriminator 1
 103 0052 AFE9      		ldi r26,lo8(99999)
 104 0054 E6E8      		ldi r30,hi8(99999)
 105 0056 F1E0      		ldi r31,hlo8(99999)
 106 0058 A150      	1:	subi r26,1
 107 005a E040      		sbci r30,0
 108 005c F040      		sbci r31,0
 109 005e 01F4      		brne 1b
 110 0060 00C0      		rjmp .
 111 0062 0000      		nop
 112               	.LVL7:
 113               	.LBE41:
 114               	.LBE40:
  15:main.c        **** 		_delay_ms(500);
 115               		.loc 1 15 0 discriminator 1
 116 0064 45BB      		out 0x15,r20
 117               	.LVL8:
 118               	.LBB42:
 119               	.LBB43:
 120               		.loc 2 187 0 discriminator 1
 121 0066 AFE9      		ldi r26,lo8(99999)
 122 0068 E6E8      		ldi r30,hi8(99999)
 123 006a F1E0      		ldi r31,hlo8(99999)
 124 006c A150      	1:	subi r26,1
 125 006e E040      		sbci r30,0
 126 0070 F040      		sbci r31,0
 127 0072 01F4      		brne 1b
 128 0074 00C0      		rjmp .
 129 0076 0000      		nop
 130               	.LVL9:
 131               	.LBE43:
 132               	.LBE42:
  17:main.c        **** 		_delay_ms(500);
 133               		.loc 1 17 0 discriminator 1
 134 0078 55BB      		out 0x15,r21
 135               	.LVL10:
 136               	.LBB44:
 137               	.LBB45:
 138               		.loc 2 187 0 discriminator 1
 139 007a AFE9      		ldi r26,lo8(99999)
 140 007c E6E8      		ldi r30,hi8(99999)
 141 007e F1E0      		ldi r31,hlo8(99999)
 142 0080 A150      	1:	subi r26,1
 143 0082 E040      		sbci r30,0
 144 0084 F040      		sbci r31,0
 145 0086 01F4      		brne 1b
 146 0088 00C0      		rjmp .
 147 008a 0000      		nop
 148               	.LVL11:
 149               	.LBE45:
 150               	.LBE44:
  19:main.c        **** 		_delay_ms(500);
 151               		.loc 1 19 0 discriminator 1
 152 008c 65BB      		out 0x15,r22
 153               	.LVL12:
 154               	.LBB46:
 155               	.LBB47:
 156               		.loc 2 187 0 discriminator 1
 157 008e AFE9      		ldi r26,lo8(99999)
 158 0090 E6E8      		ldi r30,hi8(99999)
 159 0092 F1E0      		ldi r31,hlo8(99999)
 160 0094 A150      	1:	subi r26,1
 161 0096 E040      		sbci r30,0
 162 0098 F040      		sbci r31,0
 163 009a 01F4      		brne 1b
 164 009c 00C0      		rjmp .
 165 009e 0000      		nop
 166               	.LVL13:
 167               	.LBE47:
 168               	.LBE46:
 169               		.loc 1 21 0 discriminator 1
 170 00a0 75BB      		out 0x15,r23
 171               	.LVL14:
 172               	.LBB48:
 173               	.LBB49:
 174               		.loc 2 187 0 discriminator 1
 175 00a2 AFE9      		ldi r26,lo8(99999)
 176 00a4 E6E8      		ldi r30,hi8(99999)
 177 00a6 F1E0      		ldi r31,hlo8(99999)
 178 00a8 A150      	1:	subi r26,1
 179 00aa E040      		sbci r30,0
 180 00ac F040      		sbci r31,0
 181 00ae 01F4      		brne 1b
 182 00b0 00C0      		rjmp .
 183 00b2 0000      		nop
 184               	.LVL15:
 185               	.LBE49:
 186               	.LBE48:
  22:main.c        **** 		_delay_ms(500);		
  23:main.c        **** 		PORTC = 0b10000000;
 187               		.loc 1 23 0 discriminator 1
 188 00b4 75BB      		out 0x15,r23
 189               	.LVL16:
 190               	.LBB50:
 191               	.LBB51:
 192               		.loc 2 187 0 discriminator 1
 193 00b6 AFE9      		ldi r26,lo8(99999)
 194 00b8 E6E8      		ldi r30,hi8(99999)
 195 00ba F1E0      		ldi r31,hlo8(99999)
 196 00bc A150      	1:	subi r26,1
 197 00be E040      		sbci r30,0
 198 00c0 F040      		sbci r31,0
 199 00c2 01F4      		brne 1b
 200 00c4 00C0      		rjmp .
 201 00c6 0000      		nop
 202               	.LVL17:
 203               	.LBE51:
 204               	.LBE50:
  24:main.c        **** 		_delay_ms(500);
  25:main.c        **** 		PORTC = 0b01000000;
 205               		.loc 1 25 0 discriminator 1
 206 00c8 65BB      		out 0x15,r22
 207               	.LVL18:
 208               	.LBB52:
 209               	.LBB53:
 210               		.loc 2 187 0 discriminator 1
 211 00ca AFE9      		ldi r26,lo8(99999)
 212 00cc E6E8      		ldi r30,hi8(99999)
 213 00ce F1E0      		ldi r31,hlo8(99999)
 214 00d0 A150      	1:	subi r26,1
 215 00d2 E040      		sbci r30,0
 216 00d4 F040      		sbci r31,0
 217 00d6 01F4      		brne 1b
 218 00d8 00C0      		rjmp .
 219 00da 0000      		nop
 220               	.LVL19:
 221               	.LBE53:
 222               	.LBE52:
  26:main.c        **** 		_delay_ms(500);
  27:main.c        **** 		PORTC = 0b00100000;
 223               		.loc 1 27 0 discriminator 1
 224 00dc 55BB      		out 0x15,r21
 225               	.LVL20:
 226               	.LBB54:
 227               	.LBB55:
 228               		.loc 2 187 0 discriminator 1
 229 00de AFE9      		ldi r26,lo8(99999)
 230 00e0 E6E8      		ldi r30,hi8(99999)
 231 00e2 F1E0      		ldi r31,hlo8(99999)
 232 00e4 A150      	1:	subi r26,1
 233 00e6 E040      		sbci r30,0
 234 00e8 F040      		sbci r31,0
 235 00ea 01F4      		brne 1b
 236 00ec 00C0      		rjmp .
 237 00ee 0000      		nop
 238               	.LVL21:
 239               	.LBE55:
 240               	.LBE54:
  28:main.c        **** 		_delay_ms(500);
  29:main.c        **** 		PORTC = 0b00010000;
 241               		.loc 1 29 0 discriminator 1
 242 00f0 45BB      		out 0x15,r20
 243               	.LVL22:
 244               	.LBB56:
 245               	.LBB57:
 246               		.loc 2 187 0 discriminator 1
 247 00f2 AFE9      		ldi r26,lo8(99999)
 248 00f4 E6E8      		ldi r30,hi8(99999)
 249 00f6 F1E0      		ldi r31,hlo8(99999)
 250 00f8 A150      	1:	subi r26,1
 251 00fa E040      		sbci r30,0
 252 00fc F040      		sbci r31,0
 253 00fe 01F4      		brne 1b
 254 0100 00C0      		rjmp .
 255 0102 0000      		nop
 256               	.LVL23:
 257               	.LBE57:
 258               	.LBE56:
  30:main.c        **** 		_delay_ms(500);
  31:main.c        **** 		PORTC = 0b00001000;
 259               		.loc 1 31 0 discriminator 1
 260 0104 35BB      		out 0x15,r19
 261               	.LVL24:
 262               	.LBB58:
 263               	.LBB59:
 264               		.loc 2 187 0 discriminator 1
 265 0106 AFE9      		ldi r26,lo8(99999)
 266 0108 E6E8      		ldi r30,hi8(99999)
 267 010a F1E0      		ldi r31,hlo8(99999)
 268 010c A150      	1:	subi r26,1
 269 010e E040      		sbci r30,0
 270 0110 F040      		sbci r31,0
 271 0112 01F4      		brne 1b
 272 0114 00C0      		rjmp .
 273 0116 0000      		nop
 274               	.LVL25:
 275               	.LBE59:
 276               	.LBE58:
  32:main.c        **** 		_delay_ms(500);
  33:main.c        **** 		PORTC = 0b00000100;
 277               		.loc 1 33 0 discriminator 1
 278 0118 25BB      		out 0x15,r18
 279               	.LVL26:
 280               	.LBB60:
 281               	.LBB61:
 282               		.loc 2 187 0 discriminator 1
 283 011a AFE9      		ldi r26,lo8(99999)
 284 011c E6E8      		ldi r30,hi8(99999)
 285 011e F1E0      		ldi r31,hlo8(99999)
 286 0120 A150      	1:	subi r26,1
 287 0122 E040      		sbci r30,0
 288 0124 F040      		sbci r31,0
 289 0126 01F4      		brne 1b
 290 0128 00C0      		rjmp .
 291 012a 0000      		nop
 292               	.LVL27:
 293               	.LBE61:
 294               	.LBE60:
  34:main.c        **** 		_delay_ms(500);
  35:main.c        **** 		PORTC = 0b00000010;
 295               		.loc 1 35 0 discriminator 1
 296 012c 95BB      		out 0x15,r25
 297               	.LVL28:
 298               	.LBB62:
 299               	.LBB63:
 300               		.loc 2 187 0 discriminator 1
 301 012e AFE9      		ldi r26,lo8(99999)
 302 0130 E6E8      		ldi r30,hi8(99999)
 303 0132 F1E0      		ldi r31,hlo8(99999)
 304 0134 A150      	1:	subi r26,1
 305 0136 E040      		sbci r30,0
 306 0138 F040      		sbci r31,0
 307 013a 01F4      		brne 1b
 308 013c 00C0      		rjmp .
 309 013e 0000      		nop
 310               	.LVL29:
 311               	.LBE63:
 312               	.LBE62:
  36:main.c        **** 		_delay_ms(500);
  37:main.c        **** 		PORTC = 0b00000001;
 313               		.loc 1 37 0 discriminator 1
 314 0140 85BB      		out 0x15,r24
 315               	.LVL30:
 316               	.LBB64:
 317               	.LBB65:
 318               		.loc 2 187 0 discriminator 1
 319 0142 AFE9      		ldi r26,lo8(99999)
 320 0144 E6E8      		ldi r30,hi8(99999)
 321 0146 F1E0      		ldi r31,hlo8(99999)
 322 0148 A150      	1:	subi r26,1
 323 014a E040      		sbci r30,0
 324 014c F040      		sbci r31,0
 325 014e 01F4      		brne 1b
 326 0150 00C0      		rjmp .
 327 0152 0000      		nop
 328 0154 00C0      		rjmp .L2
 329               	.LBE65:
 330               	.LBE64:
 331               		.cfi_endproc
 332               	.LFE6:
 334               		.text
 335               	.Letext0:
 336               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc5TiK72.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc5TiK72.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc5TiK72.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc5TiK72.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc5TiK72.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc5TiK72.s:13     .text.startup:0000000000000000 main

NO UNDEFINED SYMBOLS
