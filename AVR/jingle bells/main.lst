   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	initTimers
  12               	initTimers:
  13               	.LFB7:
  14               		.file 1 "main.c"
   1:main.c        **** #include<avr/io.h>
   2:main.c        **** #include<avr/interrupt.h>
   3:main.c        **** #include<util/delay.h>
   4:main.c        **** 
   5:main.c        **** #define c4 239
   6:main.c        **** #define d4 213
   7:main.c        **** #define e4 190
   8:main.c        **** #define f4 175
   9:main.c        **** #define g4 159
  10:main.c        **** #define a4 142
  11:main.c        **** #define b4 127
  12:main.c        **** #define c5 119
  13:main.c        **** #define d5 206
  14:main.c        **** #define e5 98
  15:main.c        **** #define f5 89
  16:main.c        **** #define g5 80
  17:main.c        **** #define a5 71
  18:main.c        **** 
  19:main.c        **** unsigned int play[] = {e4, e4, e4, e4, e4, e4, e4, g4, c4, d4, e4, f4, f4, f4, f4, f4, e4, e4, e4, 
  20:main.c        **** 
  21:main.c        **** unsigned char d[] = {2, 2, 4, 2, 2, 4, 2, 2, 2, 2, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 
  22:main.c        **** 
  23:main.c        **** unsigned char temp = 80;
  24:main.c        **** 
  25:main.c        **** void initTimers(void);
  26:main.c        **** void custom_delay(unsigned int t);
  27:main.c        **** 
  28:main.c        **** int main(void){
  29:main.c        **** 	initTimers();
  30:main.c        **** 	DDRB = 1<<PB3;
  31:main.c        **** 	OCR0 = 80;
  32:main.c        **** 	unsigned char i;
  33:main.c        **** 	
  34:main.c        **** 	while(1){
  35:main.c        **** 		for (i = 0; i != 51; i++){
  36:main.c        **** 			OCR0 = (play[i]);
  37:main.c        **** 			custom_delay(d[i] * temp);
  38:main.c        **** 			OCR0 = 0;
  39:main.c        **** 			_delay_ms(1);
  40:main.c        **** 		}
  41:main.c        **** 	}
  42:main.c        **** 	return 0;
  43:main.c        **** }
  44:main.c        **** 
  45:main.c        **** void initTimers(void){
  15               		.loc 1 45 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  46:main.c        **** 	TCCR0 |= (1<<COM00) | (1<<WGM01) | (1<<CS01) | (1<<CS00);
  21               		.loc 1 46 0
  22 0000 83B7      		in r24,0x33
  23 0002 8B61      		ori r24,lo8(27)
  24 0004 83BF      		out 0x33,r24
  25 0006 0895      		ret
  26               		.cfi_endproc
  27               	.LFE7:
  29               	.global	custom_delay
  31               	custom_delay:
  32               	.LFB8:
  47:main.c        **** }
  48:main.c        **** 
  49:main.c        **** void custom_delay(unsigned int t){
  33               		.loc 1 49 0
  34               		.cfi_startproc
  35               	.LVL0:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  40               	.L3:
  50:main.c        **** 	while (t > 0){
  41               		.loc 1 50 0
  42 0008 0097      		sbiw r24,0
  43 000a 01F0      		breq .L6
  44               	.LVL1:
  45               	.LBB6:
  46               	.LBB7:
  47               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  48               		.loc 2 187 0
  49 000c EFE9      		ldi r30,lo8(3999)
  50 000e FFE0      		ldi r31,hi8(3999)
  51 0010 3197      	1:	sbiw r30,1
  52 0012 01F4      		brne 1b
  53 0014 00C0      		rjmp .
  54 0016 0000      		nop
  55               	.LVL2:
  56               	.LBE7:
  57               	.LBE6:
  51:main.c        **** 		_delay_ms(1);
  52:main.c        **** 		t--;		
  58               		.loc 1 52 0
  59 0018 0197      		sbiw r24,1
  60               	.LVL3:
  61 001a 00C0      		rjmp .L3
  62               	.L6:
  63               	/* epilogue start */
  53:main.c        **** 	}
  54:main.c        **** }
  64               		.loc 1 54 0
  65 001c 0895      		ret
  66               		.cfi_endproc
  67               	.LFE8:
  69               		.section	.text.startup,"ax",@progbits
  70               	.global	main
  72               	main:
  73               	.LFB6:
  28:main.c        **** 	initTimers();
  74               		.loc 1 28 0
  75               		.cfi_startproc
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 0 */
  79               	.L__stack_usage = 0
  29:main.c        **** 	DDRB = 1<<PB3;
  80               		.loc 1 29 0
  81 0000 0E94 0000 		call initTimers
  82               	.LVL4:
  30:main.c        **** 	OCR0 = 80;
  83               		.loc 1 30 0
  84 0004 88E0      		ldi r24,lo8(8)
  85 0006 87BB      		out 0x17,r24
  31:main.c        **** 	unsigned char i;
  86               		.loc 1 31 0
  87 0008 80E5      		ldi r24,lo8(80)
  88 000a 8CBF      		out 0x3c,r24
  89               	.L9:
  90               	.LVL5:
  91 000c C0E0      		ldi r28,lo8(play)
  92 000e D0E0      		ldi r29,hi8(play)
  93 0010 00E0      		ldi r16,lo8(d)
  94 0012 10E0      		ldi r17,hi8(d)
  95               	.LVL6:
  96               	.L8:
  36:main.c        **** 			custom_delay(d[i] * temp);
  97               		.loc 1 36 0 discriminator 3
  98 0014 8881      		ld r24,Y
  99 0016 2296      		adiw r28,2
 100 0018 8CBF      		out 0x3c,r24
  37:main.c        **** 			OCR0 = 0;
 101               		.loc 1 37 0 discriminator 3
 102 001a F801      		movw r30,r16
 103 001c 9191      		ld r25,Z+
 104 001e 8F01      		movw r16,r30
 105               	.LVL7:
 106 0020 8091 0000 		lds r24,temp
 107 0024 989F      		mul r25,r24
 108 0026 C001      		movw r24,r0
 109 0028 1124      		clr __zero_reg__
 110 002a 0E94 0000 		call custom_delay
 111               	.LVL8:
  38:main.c        **** 			_delay_ms(1);
 112               		.loc 1 38 0 discriminator 3
 113 002e 1CBE      		out 0x3c,__zero_reg__
 114               	.LVL9:
 115               	.LBB8:
 116               	.LBB9:
 117               		.loc 2 187 0 discriminator 3
 118 0030 8FE9      		ldi r24,lo8(3999)
 119 0032 9FE0      		ldi r25,hi8(3999)
 120 0034 0197      	1:	sbiw r24,1
 121 0036 01F4      		brne 1b
 122 0038 00C0      		rjmp .
 123 003a 0000      		nop
 124               	.LVL10:
 125               	.LBE9:
 126               	.LBE8:
  35:main.c        **** 			OCR0 = (play[i]);
 127               		.loc 1 35 0 discriminator 3
 128 003c 90E0      		ldi r25,hi8(play+102)
 129 003e C030      		cpi r28,lo8(play+102)
 130 0040 D907      		cpc r29,r25
 131 0042 01F4      		brne .L8
 132 0044 00C0      		rjmp .L9
 133               		.cfi_endproc
 134               	.LFE6:
 136               	.global	temp
 137               		.data
 140               	temp:
 141 0000 50        		.byte	80
 142               	.global	d
 145               	d:
 146 0001 02        		.byte	2
 147 0002 02        		.byte	2
 148 0003 04        		.byte	4
 149 0004 02        		.byte	2
 150 0005 02        		.byte	2
 151 0006 04        		.byte	4
 152 0007 02        		.byte	2
 153 0008 02        		.byte	2
 154 0009 02        		.byte	2
 155 000a 02        		.byte	2
 156 000b 06        		.byte	6
 157 000c 02        		.byte	2
 158 000d 02        		.byte	2
 159 000e 02        		.byte	2
 160 000f 02        		.byte	2
 161 0010 02        		.byte	2
 162 0011 02        		.byte	2
 163 0012 02        		.byte	2
 164 0013 02        		.byte	2
 165 0014 02        		.byte	2
 166 0015 02        		.byte	2
 167 0016 02        		.byte	2
 168 0017 02        		.byte	2
 169 0018 02        		.byte	2
 170 0019 04        		.byte	4
 171 001a 04        		.byte	4
 172 001b 02        		.byte	2
 173 001c 02        		.byte	2
 174 001d 04        		.byte	4
 175 001e 02        		.byte	2
 176 001f 02        		.byte	2
 177 0020 04        		.byte	4
 178 0021 02        		.byte	2
 179 0022 02        		.byte	2
 180 0023 02        		.byte	2
 181 0024 02        		.byte	2
 182 0025 08        		.byte	8
 183 0026 02        		.byte	2
 184 0027 02        		.byte	2
 185 0028 02        		.byte	2
 186 0029 02        		.byte	2
 187 002a 02        		.byte	2
 188 002b 02        		.byte	2
 189 002c 02        		.byte	2
 190 002d 02        		.byte	2
 191 002e 02        		.byte	2
 192 002f 02        		.byte	2
 193 0030 02        		.byte	2
 194 0031 02        		.byte	2
 195 0032 02        		.byte	2
 196 0033 08        		.byte	8
 197               	.global	play
 200               	play:
 201 0034 BE00      		.word	190
 202 0036 BE00      		.word	190
 203 0038 BE00      		.word	190
 204 003a BE00      		.word	190
 205 003c BE00      		.word	190
 206 003e BE00      		.word	190
 207 0040 BE00      		.word	190
 208 0042 9F00      		.word	159
 209 0044 EF00      		.word	239
 210 0046 D500      		.word	213
 211 0048 BE00      		.word	190
 212 004a AF00      		.word	175
 213 004c AF00      		.word	175
 214 004e AF00      		.word	175
 215 0050 AF00      		.word	175
 216 0052 AF00      		.word	175
 217 0054 BE00      		.word	190
 218 0056 BE00      		.word	190
 219 0058 BE00      		.word	190
 220 005a BE00      		.word	190
 221 005c BE00      		.word	190
 222 005e D500      		.word	213
 223 0060 D500      		.word	213
 224 0062 BE00      		.word	190
 225 0064 D500      		.word	213
 226 0066 9F00      		.word	159
 227 0068 BE00      		.word	190
 228 006a BE00      		.word	190
 229 006c BE00      		.word	190
 230 006e BE00      		.word	190
 231 0070 BE00      		.word	190
 232 0072 BE00      		.word	190
 233 0074 BE00      		.word	190
 234 0076 9F00      		.word	159
 235 0078 EF00      		.word	239
 236 007a D500      		.word	213
 237 007c BE00      		.word	190
 238 007e AF00      		.word	175
 239 0080 AF00      		.word	175
 240 0082 AF00      		.word	175
 241 0084 AF00      		.word	175
 242 0086 AF00      		.word	175
 243 0088 BE00      		.word	190
 244 008a BE00      		.word	190
 245 008c BE00      		.word	190
 246 008e BE00      		.word	190
 247 0090 9F00      		.word	159
 248 0092 9F00      		.word	159
 249 0094 AF00      		.word	175
 250 0096 D500      		.word	213
 251 0098 EF00      		.word	239
 252               		.text
 253               	.Letext0:
 254               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccPxABXv.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccPxABXv.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccPxABXv.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccPxABXv.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccPxABXv.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccPxABXv.s:12     .text:0000000000000000 initTimers
     /tmp/ccPxABXv.s:31     .text:0000000000000008 custom_delay
     /tmp/ccPxABXv.s:72     .text.startup:0000000000000000 main
     /tmp/ccPxABXv.s:200    .data:0000000000000034 play
     /tmp/ccPxABXv.s:145    .data:0000000000000001 d
     /tmp/ccPxABXv.s:140    .data:0000000000000000 temp

UNDEFINED SYMBOLS
__do_copy_data
