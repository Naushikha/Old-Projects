
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e4  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000601  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000118  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000317  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3f       	cpi	r26, 0xFA	; 250
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  7a:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initTimers>:
	}
	return 0;
}

void initTimers(void){
	TCCR0 |= (1<<COM00) | (1<<WGM01) | (1<<CS01) | (1<<CS00);
  82:	83 b7       	in	r24, 0x33	; 51
  84:	8b 61       	ori	r24, 0x1B	; 27
  86:	83 bf       	out	0x33, r24	; 51
  88:	08 95       	ret

0000008a <custom_delay>:
}

void custom_delay(unsigned int t){
	while (t > 0){
  8a:	00 97       	sbiw	r24, 0x00	; 0
  8c:	41 f0       	breq	.+16     	; 0x9e <custom_delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	ef e9       	ldi	r30, 0x9F	; 159
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <custom_delay+0x8>
  96:	00 c0       	rjmp	.+0      	; 0x98 <custom_delay+0xe>
  98:	00 00       	nop
		_delay_ms(1);
		t--;		
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f6 cf       	rjmp	.-20     	; 0x8a <custom_delay>
	}
}
  9e:	08 95       	ret

000000a0 <main>:

void initTimers(void);
void custom_delay(unsigned int t);

int main(void){
	initTimers();
  a0:	0e 94 41 00 	call	0x82	; 0x82 <initTimers>
	DDRB = 1<<PB3;
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	87 bb       	out	0x17, r24	; 23
	OCR0 = 80;
  a8:	80 e5       	ldi	r24, 0x50	; 80
  aa:	8c bf       	out	0x3c, r24	; 60
  ac:	c4 e9       	ldi	r28, 0x94	; 148
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	01 e6       	ldi	r16, 0x61	; 97
  b2:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	
	while(1){
		for (i = 0; i != 51; i++){
			OCR0 = (play[i]);
  b4:	88 81       	ld	r24, Y
  b6:	22 96       	adiw	r28, 0x02	; 2
  b8:	8c bf       	out	0x3c, r24	; 60
			custom_delay(d[i] * temp);
  ba:	f8 01       	movw	r30, r16
  bc:	91 91       	ld	r25, Z+
  be:	8f 01       	movw	r16, r30
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  c4:	98 9f       	mul	r25, r24
  c6:	c0 01       	movw	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	0e 94 45 00 	call	0x8a	; 0x8a <custom_delay>
			OCR0 = 0;
  ce:	1c be       	out	0x3c, r1	; 60
  d0:	8f e9       	ldi	r24, 0x9F	; 159
  d2:	9f e0       	ldi	r25, 0x0F	; 15
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x34>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x3a>
  da:	00 00       	nop
	DDRB = 1<<PB3;
	OCR0 = 80;
	unsigned char i;
	
	while(1){
		for (i = 0; i != 51; i++){
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	ca 3f       	cpi	r28, 0xFA	; 250
  e0:	d9 07       	cpc	r29, r25
  e2:	41 f7       	brne	.-48     	; 0xb4 <main+0x14>
  e4:	e3 cf       	rjmp	.-58     	; 0xac <main+0xc>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
